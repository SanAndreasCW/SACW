// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
)

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM player WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT id, username, password, money, level, exp, gold, token, hour, minute, second, vip, helper, is_online, kills, deaths, pos_x, pos_y, pos_z, pos_angle, language, last_login, last_played, created_at, updated_at FROM player WHERE id = $1
`

func (q *Queries) GetPlayerByID(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Money,
		&i.Level,
		&i.Exp,
		&i.Gold,
		&i.Token,
		&i.Hour,
		&i.Minute,
		&i.Second,
		&i.Vip,
		&i.Helper,
		&i.IsOnline,
		&i.Kills,
		&i.Deaths,
		&i.PosX,
		&i.PosY,
		&i.PosZ,
		&i.PosAngle,
		&i.Language,
		&i.LastLogin,
		&i.LastPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlayerByUsername = `-- name: GetPlayerByUsername :one
SELECT id, username, password, money, level, exp, gold, token, hour, minute, second, vip, helper, is_online, kills, deaths, pos_x, pos_y, pos_z, pos_angle, language, last_login, last_played, created_at, updated_at FROM player WHERE username = $1
`

func (q *Queries) GetPlayerByUsername(ctx context.Context, username string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByUsername, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Money,
		&i.Level,
		&i.Exp,
		&i.Gold,
		&i.Token,
		&i.Hour,
		&i.Minute,
		&i.Second,
		&i.Vip,
		&i.Helper,
		&i.IsOnline,
		&i.Kills,
		&i.Deaths,
		&i.PosX,
		&i.PosY,
		&i.PosZ,
		&i.PosAngle,
		&i.Language,
		&i.LastLogin,
		&i.LastPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPlayer = `-- name: InsertPlayer :one
INSERT INTO player (username, password) VALUES ($1, $2) RETURNING id, username, password, money, level, exp, gold, token, hour, minute, second, vip, helper, is_online, kills, deaths, pos_x, pos_y, pos_z, pos_angle, language, last_login, last_played, created_at, updated_at
`

type InsertPlayerParams struct {
	Username string
	Password string
}

func (q *Queries) InsertPlayer(ctx context.Context, arg InsertPlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, insertPlayer, arg.Username, arg.Password)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Money,
		&i.Level,
		&i.Exp,
		&i.Gold,
		&i.Token,
		&i.Hour,
		&i.Minute,
		&i.Second,
		&i.Vip,
		&i.Helper,
		&i.IsOnline,
		&i.Kills,
		&i.Deaths,
		&i.PosX,
		&i.PosY,
		&i.PosZ,
		&i.PosAngle,
		&i.Language,
		&i.LastLogin,
		&i.LastPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE player SET last_login = CURRENT_TIMESTAMP WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateLastLogin, id)
	return err
}

const updateLastPlayed = `-- name: UpdateLastPlayed :exec
UPDATE player SET last_played = CURRENT_TIMESTAMP WHERE id = $1
`

func (q *Queries) UpdateLastPlayed(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateLastPlayed, id)
	return err
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE player 
SET username = $2, password = $3, money = $4, level = $5, exp = $6, gold = $7, token = $8, hour = $9,
    minute = $10, second = $11, vip = $12, helper = $13, is_online = $14, kills = $15, deaths = $16,
    pos_x = $17, pos_y = $18, pos_z = $19, pos_angle = $20, language = $21, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 RETURNING id, username, password, money, level, exp, gold, token, hour, minute, second, vip, helper, is_online, kills, deaths, pos_x, pos_y, pos_z, pos_angle, language, last_login, last_played, created_at, updated_at
`

type UpdatePlayerParams struct {
	ID       int32
	Username string
	Password string
	Money    int32
	Level    int32
	Exp      int32
	Gold     int32
	Token    int32
	Hour     int32
	Minute   int32
	Second   int32
	Vip      int32
	Helper   int32
	IsOnline bool
	Kills    int32
	Deaths   int32
	PosX     float32
	PosY     float32
	PosZ     float32
	PosAngle float32
	Language int32
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayer,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Money,
		arg.Level,
		arg.Exp,
		arg.Gold,
		arg.Token,
		arg.Hour,
		arg.Minute,
		arg.Second,
		arg.Vip,
		arg.Helper,
		arg.IsOnline,
		arg.Kills,
		arg.Deaths,
		arg.PosX,
		arg.PosY,
		arg.PosZ,
		arg.PosAngle,
		arg.Language,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Money,
		&i.Level,
		&i.Exp,
		&i.Gold,
		&i.Token,
		&i.Hour,
		&i.Minute,
		&i.Second,
		&i.Vip,
		&i.Helper,
		&i.IsOnline,
		&i.Kills,
		&i.Deaths,
		&i.PosX,
		&i.PosY,
		&i.PosZ,
		&i.PosAngle,
		&i.Language,
		&i.LastLogin,
		&i.LastPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
