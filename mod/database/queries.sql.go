// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const acceptCompanyApplication = `-- name: AcceptCompanyApplication :exec
UPDATE company_application
SET accepted    = true,
    answered_at = CURRENT_TIMESTAMP
WHERE player_id = $1
  AND company_id = $2
  AND accepted = false
`

type AcceptCompanyApplicationParams struct {
	PlayerID  int32
	CompanyID int32
}

func (q *Queries) AcceptCompanyApplication(ctx context.Context, arg AcceptCompanyApplicationParams) error {
	_, err := q.db.ExecContext(ctx, acceptCompanyApplication, arg.PlayerID, arg.CompanyID)
	return err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE
FROM player
WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const getCompanies = `-- name: GetCompanies :many
SELECT id, name, tag, description, balance, multiplier
FROM company
`

func (q *Queries) GetCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Tag,
			&i.Description,
			&i.Balance,
			&i.Multiplier,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompaniesApplications = `-- name: GetCompaniesApplications :many
SELECT id, player_id, company_id, description, accepted, created_at, expired_at, answered_at
FROM company_application
WHERE expired_at <= CURRENT_TIMESTAMP
`

func (q *Queries) GetCompaniesApplications(ctx context.Context) ([]CompanyApplication, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyApplication
	for rows.Next() {
		var i CompanyApplication
		if err := rows.Scan(
			&i.ID,
			&i.PlayerID,
			&i.CompanyID,
			&i.Description,
			&i.Accepted,
			&i.CreatedAt,
			&i.ExpiredAt,
			&i.AnsweredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyApplications = `-- name: GetCompanyApplications :many
SELECT id, player_id, company_id, description, accepted, created_at, expired_at, answered_at
FROM company_application
WHERE company_id = $1
  AND expired_at <= CURRENT_TIMESTAMP
`

func (q *Queries) GetCompanyApplications(ctx context.Context, companyID int32) ([]CompanyApplication, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyApplications, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyApplication
	for rows.Next() {
		var i CompanyApplication
		if err := rows.Scan(
			&i.ID,
			&i.PlayerID,
			&i.CompanyID,
			&i.Description,
			&i.Accepted,
			&i.CreatedAt,
			&i.ExpiredAt,
			&i.AnsweredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, tag, description, balance, multiplier
FROM company
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.Description,
		&i.Balance,
		&i.Multiplier,
	)
	return i, err
}

const getCompanyByTag = `-- name: GetCompanyByTag :one
SELECT id, name, tag, description, balance, multiplier
FROM company
WHERE tag = $1
LIMIT 1
`

func (q *Queries) GetCompanyByTag(ctx context.Context, tag string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByTag, tag)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.Description,
		&i.Balance,
		&i.Multiplier,
	)
	return i, err
}

const getCompanyMembers = `-- name: GetCompanyMembers :many
SELECT id, player_id, company_id, role
FROM company_member
WHERE company_id = $1
`

func (q *Queries) GetCompanyMembers(ctx context.Context, companyID int32) ([]CompanyMember, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyMembers, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyMember
	for rows.Next() {
		var i CompanyMember
		if err := rows.Scan(
			&i.ID,
			&i.PlayerID,
			&i.CompanyID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyMembersInfo = `-- name: GetCompanyMembersInfo :many
SELECT id, player_id, company_id, hour, minute, second, score, level
FROM company_member_info
WHERE company_id = $1
`

func (q *Queries) GetCompanyMembersInfo(ctx context.Context, companyID int32) ([]CompanyMemberInfo, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyMembersInfo, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyMemberInfo
	for rows.Next() {
		var i CompanyMemberInfo
		if err := rows.Scan(
			&i.ID,
			&i.PlayerID,
			&i.CompanyID,
			&i.Hour,
			&i.Minute,
			&i.Second,
			&i.Score,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT id, username, password, money, level, exp, gold, token, hour, minute, second, vip, helper, is_online, kills, deaths, pos_x, pos_y, pos_z, pos_angle, language, last_login, last_played, created_at, updated_at
FROM player
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPlayerByID(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Money,
		&i.Level,
		&i.Exp,
		&i.Gold,
		&i.Token,
		&i.Hour,
		&i.Minute,
		&i.Second,
		&i.Vip,
		&i.Helper,
		&i.IsOnline,
		&i.Kills,
		&i.Deaths,
		&i.PosX,
		&i.PosY,
		&i.PosZ,
		&i.PosAngle,
		&i.Language,
		&i.LastLogin,
		&i.LastPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlayerByUsername = `-- name: GetPlayerByUsername :one
SELECT id, username, password, money, level, exp, gold, token, hour, minute, second, vip, helper, is_online, kills, deaths, pos_x, pos_y, pos_z, pos_angle, language, last_login, last_played, created_at, updated_at
FROM player
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetPlayerByUsername(ctx context.Context, username string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByUsername, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Money,
		&i.Level,
		&i.Exp,
		&i.Gold,
		&i.Token,
		&i.Hour,
		&i.Minute,
		&i.Second,
		&i.Vip,
		&i.Helper,
		&i.IsOnline,
		&i.Kills,
		&i.Deaths,
		&i.PosX,
		&i.PosY,
		&i.PosZ,
		&i.PosAngle,
		&i.Language,
		&i.LastLogin,
		&i.LastPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserActiveCompany = `-- name: GetUserActiveCompany :one
SELECT company.id, company.name, company.tag, company.description, company.balance, company.multiplier
FROM company
         JOIN company_member ON (company.id = company_member.company_id)
WHERE company_member.player_id = $1
LIMIT 1
`

func (q *Queries) GetUserActiveCompany(ctx context.Context, playerID int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getUserActiveCompany, playerID)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tag,
		&i.Description,
		&i.Balance,
		&i.Multiplier,
	)
	return i, err
}

const getUserCompaniesInfo = `-- name: GetUserCompaniesInfo :many
SELECT company.id, company.name, company.tag, company.description, company.balance, company.multiplier
FROM company
         JOIN company_member_info ON (company.id = company_member_info.company_id)
WHERE company_member_info.player_id = $1
`

func (q *Queries) GetUserCompaniesInfo(ctx context.Context, playerID int32) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getUserCompaniesInfo, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Tag,
			&i.Description,
			&i.Balance,
			&i.Multiplier,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCompanyApplication = `-- name: InsertCompanyApplication :one
INSERT INTO company_application (player_id, company_id, description)
VALUES ($1, $2, $3)
RETURNING id, player_id, company_id, description, accepted, created_at, expired_at, answered_at
`

type InsertCompanyApplicationParams struct {
	PlayerID    int32
	CompanyID   int32
	Description sql.NullString
}

func (q *Queries) InsertCompanyApplication(ctx context.Context, arg InsertCompanyApplicationParams) (CompanyApplication, error) {
	row := q.db.QueryRowContext(ctx, insertCompanyApplication, arg.PlayerID, arg.CompanyID, arg.Description)
	var i CompanyApplication
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.CompanyID,
		&i.Description,
		&i.Accepted,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.AnsweredAt,
	)
	return i, err
}

const insertPlayer = `-- name: InsertPlayer :one
INSERT INTO player (username, password)
VALUES ($1, $2)
RETURNING id, username, password, money, level, exp, gold, token, hour, minute, second, vip, helper, is_online, kills, deaths, pos_x, pos_y, pos_z, pos_angle, language, last_login, last_played, created_at, updated_at
`

type InsertPlayerParams struct {
	Username string
	Password string
}

func (q *Queries) InsertPlayer(ctx context.Context, arg InsertPlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, insertPlayer, arg.Username, arg.Password)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Money,
		&i.Level,
		&i.Exp,
		&i.Gold,
		&i.Token,
		&i.Hour,
		&i.Minute,
		&i.Second,
		&i.Vip,
		&i.Helper,
		&i.IsOnline,
		&i.Kills,
		&i.Deaths,
		&i.PosX,
		&i.PosY,
		&i.PosZ,
		&i.PosAngle,
		&i.Language,
		&i.LastLogin,
		&i.LastPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE player
SET last_login = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateLastLogin, id)
	return err
}

const updateLastPlayed = `-- name: UpdateLastPlayed :exec
UPDATE player
SET last_played = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateLastPlayed(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateLastPlayed, id)
	return err
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE player
SET username   = $2,
    password   = $3,
    money      = $4,
    level      = $5,
    exp        = $6,
    gold       = $7,
    token      = $8,
    hour       = $9,
    minute     = $10,
    second     = $11,
    vip        = $12,
    helper     = $13,
    is_online  = $14,
    kills      = $15,
    deaths     = $16,
    pos_x      = $17,
    pos_y      = $18,
    pos_z      = $19,
    pos_angle  = $20,
    language   = $21,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, username, password, money, level, exp, gold, token, hour, minute, second, vip, helper, is_online, kills, deaths, pos_x, pos_y, pos_z, pos_angle, language, last_login, last_played, created_at, updated_at
`

type UpdatePlayerParams struct {
	ID       int32
	Username string
	Password string
	Money    int32
	Level    int32
	Exp      int32
	Gold     int32
	Token    int32
	Hour     int32
	Minute   int32
	Second   int32
	Vip      int32
	Helper   int32
	IsOnline bool
	Kills    int32
	Deaths   int32
	PosX     float32
	PosY     float32
	PosZ     float32
	PosAngle float32
	Language int32
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayer,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Money,
		arg.Level,
		arg.Exp,
		arg.Gold,
		arg.Token,
		arg.Hour,
		arg.Minute,
		arg.Second,
		arg.Vip,
		arg.Helper,
		arg.IsOnline,
		arg.Kills,
		arg.Deaths,
		arg.PosX,
		arg.PosY,
		arg.PosZ,
		arg.PosAngle,
		arg.Language,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Money,
		&i.Level,
		&i.Exp,
		&i.Gold,
		&i.Token,
		&i.Hour,
		&i.Minute,
		&i.Second,
		&i.Vip,
		&i.Helper,
		&i.IsOnline,
		&i.Kills,
		&i.Deaths,
		&i.PosX,
		&i.PosY,
		&i.PosZ,
		&i.PosAngle,
		&i.Language,
		&i.LastLogin,
		&i.LastPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
